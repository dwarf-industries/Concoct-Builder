@{ 
    var Widgets = ViewData["Components"] as List<Widget>;

}

<!doctype html>
<html>
<head>

    <script>window.$ = window.jQuery = require('jquery');</script>

    <script src="https://cdn.syncfusion.com/ej2/dist/ej2.min.js" type="text/javascript"></script>
    <link href="~/css/Themes/Light/material.css" id="theme" rel="stylesheet" />
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
    <link href="~/css/Shared/Light/_LayoutDashboard.css" id="themeAdjustments" rel="stylesheet" />
    <link href="~/font-awesome-4.7.0/css/font-awesome.css" rel="stylesheet" />
    <style>

        .widgetText {
            text-align: center;
            font-family: 'Roboto';
            font-size: 22px;
            -webkit-user-select: none; /* Safari */
            -moz-user-select: none; /* Firefox */
            -ms-user-select: none; /* IE10+/Edge */
            user-select: none; /* Standard */
        }

        .icon {
            color: #ff7979;
            width: 100% !important;
            font-size: 60px;
            text-align: center;
        }

        .IconContainer {
            margin-top: 20px;
            cursor: pointer;
            z-index: 55;
        }

        #outer-dropzone {
             transform: translateX(0px);
            margin: 0px 0px 0px 290px;
            padding: 0px;
            width: 100%;
            min-height: 94vh;
        }

        #inner-dropzone {
            height: 80px;
        }

        .dropzone {
            border: dashed 4px transparent;
            border-radius: 4px;
            margin: 10px auto 30px;
            padding: 10px;
            width: 80%;
            transition: background-color 0.3s;
        }

        .drop-active {
            border-color: #aaa;
        }

        .drop-target {
            border-color: #fff;
            border-style: solid;
        }

        .drag-drop {
            display: inline-block;
            min-width: 40px;
            padding: 2em 0.5em;
            margin: 1rem 0 0 1rem;
            color: #fff;
            background-color: #29e;
            border: solid 2px #fff;
            touch-action: none;
            transform: translate(0px, 0px);
        }
         

        .resize-drag {
            transform: translate(301px, 269px);
            border: 2px dashed #1c86c8;
        }
    </style>
</head>
<body>
    <div class="stackblitz-container material">
        <div class="control-section">

            <!-- sample level element  -->
            <div id="wrapper">

                <!--header-section  declaration -->
                <div class="main-header" id="header-section">
                    <ul class="header-list">
                        <li class="float-left header-style icon-menu" id="hamburger"></li>


                        <li class="header-style float-right support border-left" onclick="CallUrl(https://platform.concoctcloud.com/OutboundDetails/RelatedProject?projectId=5012)"><b>Support</b></li>
                        <li class="header-style float-right support border-left" onclick="ChatToggle(1)"><b>Open Chat</b></li>

                        <li class="header-style float-right support border-left" onclick="ChangeTheme()">
                            <label for="ChangeTheme" id="themeLabel">Light</label>
                            <input id="ChangeTheme" type="checkbox" />
                        </li>


                    </ul>
                </div>
                <!-- end of header-section -->
                <div id="PlatformElement">
                    <!-- sidebar element declaration -->
                    <aside id="sidebar-treeview" style="overflow-x:hidden;">
                        <div class="main-menu">
                            <div class="table-content" style="padding:0;">
 
                                @*//   class="IconContainer drag-drop" id="yes-drop"*@
                                @foreach (var widget in Widgets)
                                {
                            <div class="IconContainer">
                                <i class="fa @widget.Icon icon" aria-hidden="true" onclick="GenerateWidget('fa @widget.Icon icon','@widget.ComponentName')"></i>

                                <p class="widgetText">
                                    @widget.DisplayName
                                </p>
                            </div>}


                            </div>
                        </div>
                    </aside>

                    <div class="main-content" id="main-text" style="min-height: 94vh;">
                        <div class="sidebar-content dropzone" id="outer-dropzone" >
                            @RenderBody()
                        </div>
                    </div>
                </div>


            </div>


        </div>

    </div>
    <script src="~/js/Interact.js"></script>
    <script>
        var storage = window.localStorage;


    var IsOpen = 0;
    var cThemeToggle = new ejs.buttons.Switch({ checked: false });
    cThemeToggle.appendTo('#ChangeTheme');
    var data;
    // Sidebar Initialization
    var sidebarMenu = new ej.navigations.Sidebar({
        width: '290px',
        target: '.main-content',
        mediaQuery: '(min-width: 600px)',
    });
    sidebarMenu.appendTo('#sidebar-treeview');
    //end of Sidebar initialization

    //if (storage.getItem("Theme") !== undefined) {
    //    SetTheme(storage.getItem("Theme"));
    //}
    //else {
    //    storage.setItem("Theme", false);
    //}

    // Toggle the Sidebar
    document.getElementById('hamburger').addEventListener('click', function () {
        sidebarMenu.toggle();
        sidebarChat.toggle();
    });
    // open new tab


    function ChangeTheme(args) {
        cThemeToggle.click();

        if (cThemeToggle.checked === true)
        {
            $("#themeLabel").html("Dark");
            document.getElementById('theme').href = "/css/Themes/Dark/fabric-dark.min.css";
            document.getElementById('themeAdjustments').href = "/css/Shared/Dark/_LayoutDashboard.css";
            storage.setItem("Theme", true);


        }
        else
        {
            $("#themeLabel").html("Light");
            document.getElementById('theme').href = "/css/Themes/Light/material.min.css";
            document.getElementById('themeAdjustments').href = "/css/Shared/Light/_LayoutDashboard.css";
            storage.setItem("Theme", false);

        }
    }

    function SetTheme(type)
    {
        if (type === "true") {
            cThemeToggle.click();

            $("#themeLabel").html("Dark");
            document.getElementById('theme').href = "/css/Themes/Dark/fabric-dark.min.css";
            document.getElementById('themeAdjustments').href = "/css/Shared/Dark/_LayoutDashboard.css";

        }
        else {
            $("#themeLabel").html("Light");
            document.getElementById('theme').href = "/css/Themes/Light/material.min.css";
            document.getElementById('themeAdjustments').href = "/css/Shared/Light/_LayoutDashboard.css";
        }
    }


    function CallUrl(url)
    {
        window.location.href = url;
    }

    function ShowLoader()
    {
        $("#spinner").show();
        $("#Content").hide();
    }
    function ShowContent()
    {
        $("#spinner").hide();
        $("#Content").show();
    }

    function ChatToggle(val)
    {
        if(IsOpen == 1)
        {
            $("#PlatformElement").slideToggle();
            $("#ChatElement").slideToggle();
        }
        else
        {
            $("#PlatformElement").slideToggle();
            $("#ChatElement").slideToggle();
        }
        IsOpen = val;
    }

    function gettoken() {
        var token = '@Html.AntiForgeryToken()';
        token = $(token).val();
        return token;
    }

    function GenerateWidget(target, componentName)
    {
        debugger
        var getElement =  document.createElement("div");
        getElement.setAttribute("id", "yes-drop");
        getElement.classList.add("resize-drag");
        getElement.style.setProperty("top", "20");
        getElement.style.setProperty("left", "20");

        $.ajax({
            url: "/Home/GetComponent?componentName=" + componentName,
            method: "GET",
            success: function (data) {
                debugger
                
 
                $("#yes-drop").html(data)
            }
        });
        $("#outer-dropzone").append(getElement);
    }


    interact('.resize-drag')
        .resizable({
            // resize from all edges and corners
            edges: { left: true, right: true, bottom: true, top: true },

            listeners: {
                move(event) {
                    var target = event.target
                    var x = (parseFloat(target.getAttribute('data-x')) || 0)
                    var y = (parseFloat(target.getAttribute('data-y')) || 0)

                    // update the element's style
                    target.style.width = event.rect.width + 'px'
                    target.style.height = event.rect.height + 'px'

                    // translate when resizing from top or left edges
                    x += event.deltaRect.left
                    y += event.deltaRect.top

                    target.style.transform = 'translate(' + x + 'px,' + y + 'px)'

                    target.setAttribute('data-x', x)
                    target.setAttribute('data-y', y)
                  //  target.textContent = Math.round(event.rect.width) + '\u00D7' + Math.round(event.rect.height)
                }
            },
            modifiers: [
                // keep the edges inside the parent
                interact.modifiers.restrictEdges({
                    outer: 'parent'
                }),

                // minimum size
                interact.modifiers.restrictSize({
                    min: { width: 100, height: 50 }
                })
            ],

            inertia: true
        })
        .draggable({
            listeners: { move: window.dragMoveListener },
            inertia: true,
            modifiers: [
                interact.modifiers.restrictRect({
                    restriction: 'parent',
                    endOnly: true
                })
            ]
        })

        function dragMoveListener(event) {
            var target = event.target,
                // keep the dragged position in the data-x/data-y attributes
                x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
                y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

            // translate the element
            target.style.webkitTransform =
                target.style.transform =
                'translate(' + x + 'px, ' + y + 'px)';

            // update the posiion attributes
            target.setAttribute('data-x', x);
            target.setAttribute('data-y', y);
        }
    </script>
 
    <style>
        .sb-mobile-diagram {
            width: 100%;
            height: 100%;
            float: left;
        }
    </style>
</body>
</html>



