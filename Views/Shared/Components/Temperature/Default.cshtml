@{ var UniqueId = Program.GetUniqueId(); }

 

<div class="control-section" style="width:100%;height:100%; overflow:hidden" id="@UniqueId">
    <div class="contextmenu-control" style="width:100%;height:100%;">
        <div id='contextmenutarget_@UniqueId' style="width:100%;height:100%;">
            <div class="col-md-12 control-section">
                <div class="content-wrapper" id="column-container_@UniqueId">
                    <div id="boxContainer_@UniqueId" style="width:92%;"></div>
                </div>
            </div>

        </div>
        <ul id='contextmenu_@UniqueId'></ul>
    </div>
</div>

<script>


    var uniqueId = "boxContainer_@UniqueId";
    var uuid = "@UniqueId";
    function RedRaw() {
        $("#column-container_" + uuid).html("<div id=" + uniqueId + "  ></div>");
        DrawTemperature();
    }
    DrawTemperature();


        var menuItems = [
        {
            text: 'Container Selected - Event'
        },
        {
            separator: true
        },
        {
            text: 'Delete'
        },
        ];
    var menuOptions = {
        target: '#contextmenutarget_@UniqueId',
        items: menuItems,
        beforeItemRender: function (args) {
            if (args.item.text === 'Link') {
                args.element.classList.add('e-disabled');
            }
        },
        select: function (args) {
            console.log(args);
            console.log(args.item.properties.text);
            switch (args.item.properties.text) {

                case "Container Selected - Event":
                    ActivateEvent("@UniqueId");
                    break;
                case "Delete":
                    RemoveElement("@UniqueId");
                    break;

            }
        }
    };
    var menuObj = new ej.navigations.ContextMenu(menuOptions, '#contextmenu_@UniqueId');

    function DrawTemperature() {
        var gauge = new ej.lineargauge.LinearGauge({
            title: 'Temperature Measure',

            container: {
                width: 13,
                roundedCornerRadius: 5,
                type: 'Thermometer'
            },
            axes: [{
                minimum: 0,
                maximum: 180,
                line: {
                    width: 0
                },
                majorTicks: {
                    interval: 20,
                    color: '#9e9e9e'
                },
                minorTicks: {
                    color: '#9e9e9e'
                },
                pointers: [
                    {
                        value: 90,
                        height: 13,
                        width: 13,
                        roundedCornerRadius: 5,
                        type: 'Bar',
                        color: '#f02828'
                    }
                ]
            },
            {
                minimum: 0,
                maximum: 180,
                line: {
                    width: 0
                },
                majorTicks: {
                    interval: 20
                },
                opposedPosition: true,
                pointers: [
                    {
                        width: 0
                    }
                ]
            }]
        });
        gauge.appendTo('#boxContainer_@UniqueId');
    }



</script>