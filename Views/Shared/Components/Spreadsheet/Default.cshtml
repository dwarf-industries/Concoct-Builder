@{ var UniqueId = Program.GetUniqueId(); }

 
<div class="control-section" style="width:100%;height:100%; overflow:hidden" id="@UniqueId">
    <div class="contextmenu-control" style="width:100%;height:100%;">
        <div id='contextmenutarget_@UniqueId' style="width:100%;height:100%;">
            <div class="col-md-12 control-section">
                <div class="content-wrapper" id="column-container_@UniqueId">
                    <div id="spreadsheet_@UniqueId"></div>
                </div>
            </div>

        </div>
        <ul id='contextmenu_@UniqueId'></ul>
    </div>
</div>

<script>

    var elementOptions = GetDefaultMenu();

    function GetElementUUID() {
        return "@UniqueId";
    }

    function GetBindingOptions() {
        return elementOptions;
    }

    var uniqueId = "spreadsheet_@UniqueId";
    var uuid = "@UniqueId";
    function RedRaw() {

        $("#column-container_" + uuid).html("");
        $("#column-container_" + uuid).html("<div id=" + uniqueId + "  ></div>");
        DrawSpreadsheet();
    }
    DrawSpreadsheet();


        var menuItems = [
        {
            text: 'Container Selected - Event'
        },
        {
            separator: true
        },
        {
            text: 'Delete'
        },
        ];
    var menuOptions = {
        target: '#contextmenutarget_@UniqueId',
        items: menuItems,
        beforeItemRender: function (args) {
            if (args.item.text === 'Link') {
                args.element.classList.add('e-disabled');
            }
        },
        select: function (args) {
            console.log(args);
            console.log(args.item.properties.text);
            switch (args.item.properties.text) {

                case "Container Selected - Event":
                    ActivateEvent("@UniqueId");
                    break;
                case "Delete":
                    RemoveElement("@UniqueId");
                    break;

            }
        }
    };
    var menuObj = new ej.navigations.ContextMenu(menuOptions, '#contextmenu_@UniqueId');


    //Initialize Spreadsheet component

    function DrawSpreadsheet() {
        var spreadsheet = new ej.spreadsheet.Spreadsheet({
            sheets: [
                {
                    name: 'Car Sales Report',
                    rows: [
                        {
                            index: 30,
                            cells: [
                                { index: 4, value: 'Total Amount:', style: { fontWeight: 'bold', textAlign: 'right' } },
                                { formula: '=SUM(F2:F30)', style: { fontWeight: 'bold' } },
                            ]
                        }],
                    columns: [
                        { width: 180 }, { width: 130 }, { width: 130 }, { width: 180 },
                        { width: 130 }, { width: 120 }
                    ]
                }
            ],
            openUrl: 'https://ej2services.syncfusion.com/production/web-services/api/spreadsheet/open',
            saveUrl: 'https://ej2services.syncfusion.com/production/web-services/api/spreadsheet/save',
            created: function () {
                // Applies cell and number formatting to specified range of the active sheet
                spreadsheet.cellFormat({ fontWeight: 'bold', textAlign: 'center', verticalAlign: 'middle' }, 'A1:F1');
                spreadsheet.numberFormat('$#,##0.00', 'F2:F31');
            }
        });

        //Render initialized Spreadsheet component
        spreadsheet.appendTo('#spreadsheet_@UniqueId');
    }

</script>