
<style>
    .control-section {
        overflow: auto;
    }

    /* Media Quries for various devices */

    @@media only screen and (max-width: 965px) {
        .sample_container.avatar-types {
            max-width: 265px;
            margin: auto;
            margin-top: 0;
        }

        .e-avatar-showcase.e-card {
            width: 120px;
        }
    }

    @@media only screen and (min-width: 965px) {
        .sample_container.avatar-types {
            max-width: 488px;
            margin: auto;
            margin-top: 35px;
        }

        .e-avatar-showcase.e-card {
            width: 150px;
        }
    }

    @@media only screen and (max-width: 340px) {
        .sample_container.avatar-types {
            max-width: 131px;
        }
    }

    .sample_container.avatar-types .avatar-block {
        display: inline-block;
        vertical-align: top;
    }

    /* Avatar image source */

    .e-avatar img.image {
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center;
    }

    /* SVG Icons */

    .chrome {
        background: transparent url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Cpath fill='%23ffffff' d='M16.033 11.049a5.155 5.155 0 1 1 0 10.312 5.156 5.156 0 0 1 0-10.312zM16.124 0c1.281-.003 9.659.318 14.268 9.043h-.016l.01.018c.33.578 3.745 6.94-.485 14.969 0 0-4.215 8.107-14.565 7.968l-.452-.012-.004.007-.004.007.02-.037c.564-.98 5.112-8.884 6.357-11.067l.016-.028.007-.008.04-.069.11-.127a7.085 7.085 0 0 0 1.457-2.967l.01-.046.035-.151c.088-.424.148-.944.128-1.549l-.006-.117v-.004l-.007-.143-.006-.07-.005-.079-.012-.116v-.01l-.001-.008-.016-.158a7.2 7.2 0 0 0-.096-.572l-.018-.081-.013-.064a9.801 9.801 0 0 0-.692-2.016c-.165-.243-.332-.489-.512-.733l-.142-.187 8.728-2.554s-10.538-.01-13.018-.001l.021.005H16.642l-.14-.013a7.034 7.034 0 0 0-1.132-.003l-.167.016h-.047l-.034-.001c-.193.002-1.213.045-2.492.764l-.005.003-.033.016a7.158 7.158 0 0 0-3.25 3.533l-.059.148-6.485-6.404s4.74 8.311 6.165 10.779l.065.113.023.088a7.14 7.14 0 0 0 7.777 5.118l.144-.02L14.854 32h-.027c-.667-.005-7.894-.234-12.744-7.906 0 0-4.925-7.698.37-16.573l.252-.411.001-.002C2.822 6.904 6.58.374 15.958.003c0 0 .057-.003.166-.003z'/%3E%3C/svg%3E") no-repeat 100% 100%;
    }

    .svg_icons {
        width: 32px;
        height: 32px;
        display: inline-block;
    }

    /* Card Customization */

    .e-avatar-showcase.e-card {
        height: 113px;
        padding: 5px;
        margin: 5px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
        border-radius: 8px;
    }

        .e-avatar-showcase.e-card .e-card-header .e-card-header-title {
            align-self: center;
            font-size: 18px;
            letter-spacing: 1px;
            text-shadow: #eaeaea 1px 1px 2px;
        }

        .e-avatar-showcase.e-card .e-card-header .e-card-sub-title {
            color: rgba(0, 0, 0, 0.75);
            white-space: pre-line;
            font-size: 14px;
            text-shadow: #eaeaea 1px 1px 2px;
        }

            .e-avatar-showcase.e-card .e-card-header .e-card-sub-title p {
                margin: 0;
            }

        .e-avatar-showcase.e-card .e-card-content {
            overflow: visible;
            align-self: center;
            padding: 10px 0 10px 0;
        }

            .e-avatar-showcase.e-card .e-card-content .e-avatar {
                font-size: 18px;
            }

    /* Font Icons */

    @@font-face {
        font-family: 'Contacts';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj0gSRgAAAEoAAAAVmNtYXDnEOdaAAABjAAAADhnbHlmiAnWagAAAcwAAADwaGVhZBD04psAAADQAAAANmhoZWEHiwNuAAAArAAAACRobXR4C9AAAAAAAYAAAAAMbG9jYQAwAHgAAAHEAAAACG1heHABDwA1AAABCAAAACBuYW1lby+ImAAAArwAAAIxcG9zdGUbI4AAAATwAAAAOwABAAADUv9qAFoEAAAAAAAD3QABAAAAAAAAAAAAAAAAAAAAAwABAAAAAQAAWW9ja18PPPUACwPoAAAAANb8zuYAAAAA1vzO5gAAAAAD3QPqAAAACAACAAAAAAAAAAEAAAADACkAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQPwAZAABQAAAnoCvAAAAIwCegK8AAAB4AAxAQIAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAQNS/2oAWgPqAJYAAAABAAAAAAAABAAAAAPoAAAD6AAAAAAAAgAAAAMAAAAUAAMAAQAAABQABAAkAAAABAAEAAEAAOcB//8AAOcA//8AAAABAAQAAAABAAIAAAAAADAAeAACAAAAAAO+A+oADQAZAAA3FBYXIT4BNS4BJyEOARMeARc+ATcuAScOAS4YFwMzFxgDq4H+zYGr4QOCY2KCAwOCYmGCnCtOISFOK3qiAwOiAe1igwICg2JjggICggAAAAACAAAAAAPdA+oAFAAoAAABDgEHIicjDgEHLgEnLgEnPgE3HgEFFBYfARYfATcXFhc2JDcmJCcGBAOkBfK3KioXEFcpBBEMRUsBBfK3tvL8cVRLDggBBsQKLDDPARMFBf7tz87+7QI+ndEEBwI/Izh2DS+RVZ3RBATRnWCmN3BIETecAgcBBPK1tfIEBPIAAAAAABIA3gABAAAAAAAAAAEAAAABAAAAAAABAAgAAQABAAAAAAACAAcACQABAAAAAAADAAgAEAABAAAAAAAEAAgAGAABAAAAAAAFAAsAIAABAAAAAAAGAAgAKwABAAAAAAAKACwAMwABAAAAAAALABIAXwADAAEECQAAAAIAcQADAAEECQABABAAcwADAAEECQACAA4AgwADAAEECQADABAAkQADAAEECQAEABAAoQADAAEECQAFABYAsQADAAEECQAGABAAxwADAAEECQAKAFgA1wADAAEECQALACQBLyBDb250YWN0c1JlZ3VsYXJDb250YWN0c0NvbnRhY3RzVmVyc2lvbiAxLjBDb250YWN0c0ZvbnQgZ2VuZXJhdGVkIHVzaW5nIFN5bmNmdXNpb24gTWV0cm8gU3R1ZGlvd3d3LnN5bmNmdXNpb24uY29tACAAQwBvAG4AdABhAGMAdABzAFIAZQBnAHUAbABhAHIAQwBvAG4AdABhAGMAdABzAEMAbwBuAHQAYQBjAHQAcwBWAGUAcgBzAGkAbwBuACAAMQAuADAAQwBvAG4AdABhAGMAdABzAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAHUAcwBpAG4AZwAgAFMAeQBuAGMAZgB1AHMAaQBvAG4AIABNAGUAdAByAG8AIABTAHQAdQBkAGkAbwB3AHcAdwAuAHMAeQBuAGMAZgB1AHMAaQBvAG4ALgBjAG8AbQAAAAACAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBAgEDAQQABHVzZXIKY2hhdC0wMS13ZgAAAA==) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .people,
    .e-people {
        font-family: 'Contacts';
    }

        .e-people:before {
            content: '\e913';
        }

    .e-event:before {
        content: '\e65d';
    }

    .e-avatar .e-event.icons {
        font-size: 24px;
    }

    .e-avatar .e-people.icons {
        font-size: 24px;
    }

    /* Custom Avatar Background Color */

    .e-avatar.Screen {
        background-color: #1c86c8;
    }

    .e-avatar.Event {
        background-color: #b73030;
    }

    .tailwind .e-avatar.Screen {
        color: white;
    }

    .bootstrap4 .e-avatar.Screen {
        background-color: #1c86c8;
    }

    .tailwind .e-avatar.Event {
        color: white;
    }

    .bootstrap4 .e-avatar.Event {
        background-color: #b73030;
    }

    .bootstrap4 .e-avatar .chrome {
        background: transparent url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'%3E%3Cpath fill='%23666666' d='M16.033 11.049a5.155 5.155 0 1 1 0 10.312 5.156 5.156 0 0 1 0-10.312zM16.124 0c1.281-.003 9.659.318 14.268 9.043h-.016l.01.018c.33.578 3.745 6.94-.485 14.969 0 0-4.215 8.107-14.565 7.968l-.452-.012-.004.007-.004.007.02-.037c.564-.98 5.112-8.884 6.357-11.067l.016-.028.007-.008.04-.069.11-.127a7.085 7.085 0 0 0 1.457-2.967l.01-.046.035-.151c.088-.424.148-.944.128-1.549l-.006-.117v-.004l-.007-.143-.006-.07-.005-.079-.012-.116v-.01l-.001-.008-.016-.158a7.2 7.2 0 0 0-.096-.572l-.018-.081-.013-.064a9.801 9.801 0 0 0-.692-2.016c-.165-.243-.332-.489-.512-.733l-.142-.187 8.728-2.554s-10.538-.01-13.018-.001l.021.005H16.642l-.14-.013a7.034 7.034 0 0 0-1.132-.003l-.167.016h-.047l-.034-.001c-.193.002-1.213.045-2.492.764l-.005.003-.033.016a7.158 7.158 0 0 0-3.25 3.533l-.059.148-6.485-6.404s4.74 8.311 6.165 10.779l.065.113.023.088a7.14 7.14 0 0 0 7.777 5.118l.144-.02L14.854 32h-.027c-.667-.005-7.894-.234-12.744-7.906 0 0-4.925-7.698.37-16.573l.252-.411.001-.002C2.822 6.904 6.58.374 15.958.003c0 0 .057-.003.166-.003z'/%3E%3C/svg%3E") no-repeat 100% 100%;
    }

    .foreign-object {
        text-align: center;
    }
</style>
<div id="tpmTemplate" style="display:none;">

</div>
<div style="display:flex; width:100%;height:100%;">
    <div id="layoutDiagram" style="width:100%;"></div>
</div>

<input type="file" onchange="PlaceHolderChanged" style="display:none" id="placeholder_file" />

<div id="dialog"></div>

<div id="ContentMenuTemplate" style="display:none">
    <div id="element"></div>
</div>

<script>
    var CurrentActiveEvent;
    var activeNodeCompoents = {};
    var LayoutCollection = {};
    var activeNodeOptions = {};
    var lastActiveLayout;
    var activeNode;
    var interval1 = [1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75];
    var gridlines1 = { lineColor: '#e0e0e0', lineIntervals: interval1 };

    ej.base.enableRipple(true);

    var elementOptions = [
        {
            'text': 'On Element Clicked',
            'id': 'Event1',
            'enabled': true,
            'category': 'Events',
            'EventName': "ElementClicked"
        },
        {
            'text': 'Delete',
            'id': 'Option1',
            'enabled': true,
            'category': 'Element Specific',
            'EventName': "RemoveElement"
        },
        {
            'text': 'Enable Scaling',
            'id': 'Option3',
            'enabled': true,
            'category': 'Element Specific',
            'EventName': "Scale"
        },
        {
            'text': 'Close',
            'id': 'Option5',
            'enabled': true,
            'category': 'Element Specific',
            'EventName': "Cancel"
        }
    ];



    var defaultContextOptions = [
        {
            'text': 'On Element Clicked',
            'id': 'Event1',
            'enabled': true,
            'category': 'Events',
            'EventName': "ElementClicked"
        },
        {
            'text': 'Delete',
            'id': 'Option1',
            'enabled': true,
            'category': 'Element Specific',
            'EventName': "RemoveElement"
        },
        {
            'text': 'Enable Scaling',
            'id': 'Option3',
            'enabled': true,
            'category': 'Element Specific',
            'EventName': "Scale"
        },
        {
            'text': 'Close',
            'id': 'Option5',
            'enabled': true,
            'category': 'Element Specific',
            'EventName': "Cancel"
        }
    ];

    function GetDefaultMenu() {
        return defaultContextOptions;
    }

    // Initialize Dialog component
    var dialog = new ej.popups.Dialog({
        //Animation options
        animationSettings: {
            effect: 'Zoom',
            duration: 400,
            delay: 0
        },
        // Enables the header
        header: 'Element Options',
        // Dialog content
        content: 'Dialog enabled with Zoom effect',

        // Dialog width
        width: '250px'
    });
    // Render initialized Dialog
    dialog.appendTo('#dialog');

    dialog.hide();

    let nodes = [
        
    ];
    let layoutConnectors = [];

    DrawLayoutDiagramDiagram();

    function DrawLayoutDiagramDiagram() {

        $("#layoutDiagram").html("");
        //Initializes diagram control
        var diagram = new ej.diagrams.Diagram({
            nodes: nodes, connectors: layoutConnectors,
            snapSettings: { horizontalGridlines: gridlines1, verticalGridlines: gridlines1 },
            //Sets the default values of a node
            getNodeDefaults: function (node) {
                var obj = {};
                if (obj.width === undefined) {
                    obj.width = 145;
                } else {
                    var ratio = 100 / obj.width;
                    obj.width = 100;
                    obj.height *= ratio;
                }
                obj.style = { fill: '#357BD2', strokeColor: 'white' };
                obj.annotations = [{ style: { color: 'white', fill: 'transparent' } }];
                //   obj.ports = getNodePorts(node);
                return obj;
            },
            //Sets the default values of a Connector.
            getConnectorDefaults: function (obj) {
                if (obj.id.indexOf('connector') !== -1) {
                    obj.type = 'Orthogonal';
                    obj.targetDecorator = { shape: 'Arrow', width: 10, height: 10 };
                }
            },
            //Sets the Node style for DragEnter element.
            dragEnter: function (args) {
                var obj = args.element;
                if (obj instanceof ej.diagrams.Node) {
                    var oWidth = obj.width;
                    var oHeight = obj.height;
                    var ratio = 100 / obj.width;
                    obj.width = 100;
                    obj.height *= ratio;
                    obj.offsetX += (obj.width - oWidth) / 2;
                    obj.offsetY += (obj.height - oHeight) / 2;
                    obj.style = { fill: '#357BD2', strokeColor: 'white' };
                }
            },
            collectionChange: function (args) {

                //Only if we have a deleted item
                if (args.type === "Removal") {
                    var element = args.element.id; //Get the deleted item id handle

                    if (element === undefined)
                        return;

                    RemoveNode(element);
                }
            },
            sizeChange: function (args) {
                try {

                    var eventType = args.source.nodes.length;

                    if (eventType === 1) {
                        UpdateNodeSize(args.source.nodes[0].id, args.newValue.width, args.newValue.height);
                    }
                    else {
                        args.source.nodes.forEach(x => {
                            UpdateNodeSize(x.id, x.width, x.height);

                        });
                    }
                 
               
                }
                catch (e) {

                }
            },
            propertyChange: function (args) {

                try {
                    var element = args.element.id;

                    //Check if the changed property has a valid ID
                    if (element === undefined)
                        return;

                    //Get the co ordinates of the new position
                    var x = args.newValue.offsetX;
                    var y = args.newValue.offsetY;

                    //Find the index of the element and assign it to the node object
                    let index = nodes.findIndex(node => node.id === element);
                    nodes[index].offsetX = x;
                    nodes[index].offsetY = y;
                }
                catch (e) {

                }


            },
            doubleClick: function (args) {

                var myDialog = document.getElementById("dialog");
                myDialog.style.setProperty("top", args.position.y +"px");
                myDialog.style.setProperty("left", args.position.x+ "px");
                var element = args.source.id;
                if (element === undefined)
                    dialog.hide();
                else
                {
                    activeNode = element;
                    bindingOptions = activeNodeOptions[activeNode].elementOptions;
                    DrawBindingOptions();
                    var bidnignList = document.getElementById("ContentMenuTemplate").cloneNode(true);
                    bidnignList.style.setProperty("display", "");
                    dialog.content = bidnignList;
                    dialog.show();
                    document.getElementById("ContentMenuTemplate").innerHTML = `<div id="element"></div>`;



                    setTimeout(function (args) {
                        const divs = document.querySelectorAll('.e-list-item');

                        divs.forEach(el => el.addEventListener('click', event => {
                            var target = event.currentTarget;
                            var id = target.getAttribute("id").split("_")[1];
                            var element;
                            bindingOptions.forEach(x => {
                                if (x.id === id) {
                                    element = x;
                                }
                            });
                            switch (element.EventName) {
                                case "ElementClicked":
                                    dialog.hide();
                                    ActivateEvent(activeNode);
                                    break;
                                case "RemoveElement":
                                    dialog.hide();
                                    RemoveNode(activeNode);
                                    break;
                                case "Cancel":
                                    dialog.hide();
                                    break;
                                case "Upload":
                                    dialog.hide();
                                    UploadBackground();
                                    break;
                                case "SetBackground":

                                    break;
                                default:
                                    dialog.hide();
                                    break;
                            }
                             
                        }));
                    }, 200)

                }
            }
        });
        diagram.appendTo('#layoutDiagram');
        var getElement = document.getElementById("layoutDiagram_grid_rect");
        getElement.remove();
    }

    function AddLayoutElementsAt(elements) {
        if (elements === undefined) {
            ShowAlert("Initialization Failed, please contact the support with the following code: Error 22");
            return;
        }
            
        nodes = [];
        activeNodeCompoents = {};
        elements.forEach(x => {
            try {

            }
            catch (e) {

            }
            $.ajax({
                url: "/Home/GetComponent?componentName=" + x.componentName,
                method: "GET",
                success: function (data) {

                    $("#tpmTemplate").html(data);
                    var isCustom = false;
                    var getClone = document.getElementById("tpmTemplate").cloneNode(true);
                    var cNode = parseInt(nodes.length) + 1;
                    var newId = 'node' + cNode;
                    var elementOptions = GetBindingOptions();
                    var uuId = GetElementUUID();

                    // We don't trust that the node array will stay empty, that's why we check if we have a repeating element in the collection
                    // Using find closest available algorithm find the first free Id in the collection then exit.
                    var idIndex = 0;
                    while (nodes.findIndex(node => node !== undefined ? node.id === newId : "") !== -1) {
                        newId = 'node' + idIndex; //Generate a new Id
                        idIndex++; //Increment by 1 in case it fails
                    }

                    if (x.base64 !== undefined && x.base64 !== "" && x.base64 !== null) {

                        var activeId = uuId;
                        var imageElement = document.getElementById("placeholder_" + activeId);
                        imageElement.setAttribute("src", "data:image/jpeg;base64, " + x.base64);
                        imageElement.style.setProperty("display", "");

                        imageElement.style.setProperty("width", "100%");
                        imageElement.style.setProperty("height", "100%");
                        imageElement.style.setProperty("display", "");
                        getClone = imageElement;
                        activeNodeCompoents[newId] = getClone;
                        isCustom = true;
                    }
                    else {
                        activeNodeCompoents[newId] = getClone.cloneNode(true);
                        //Ensure panel can grow on all sides and set it visible
                        getClone.style.setProperty("width", "100%");
                        getClone.style.setProperty("height", "100%");
                        getClone.style.setProperty("display", "");

                    }
                    //Assign the ViewComponent in a shadow dom so it can be resized and applied to the graph on resize
                    activeNodeOptions[newId] = {
                        uuId: uuId,
                        elementOptions: elementOptions
                    };
                    debugger
                  
                   

                    //Add the new view component to the node array.
                    nodes.push({
                        id: newId, width: parseFloat(x.width), height: parseFloat(x.height), offsetX: parseFloat(x.offsetX), offsetY: parseFloat(x.offsetY),
                        shape:
                        {
                            type: 'HTML',
                            content: getClone
                        },
                        ComponentName: x.componentName,
                        base64: x.base64,
                        IsCustom: isCustom,
                        Loaded:true

                    });
                    //Draw the layoutDiagram
                    DrawLayoutDiagramDiagram();
                    $("#tpmTemplate").html(""); //Dispose the template so widgets don't draw inside of it.
                    //Redraw can be disposed of ??
                },
                error: function (Exception) {
                    //Recursive but electron.net sometimes fails ot inialize viewcomponents.
                    AddLayoutElementsAt(elements);
                }
            });
        });

        setTimeout(function () {
            RedRaw();
        },300)
       

    }


    function AddLayoutElement(componentName, content) {
        $("#tpmTemplate").html(content);
        
        var getClone = document.getElementById("tpmTemplate").cloneNode(true);
        var elementOptions = GetBindingOptions();
        var uuId = GetElementUUID();
        var cNode = parseInt(nodes.length) + 1;
        var newId = 'node' + cNode;

        // We don't trust that the node array will stay empty, that's why we check if we have a repeating element in the collection
        // Using find closest available algorithm find the first free Id in the collection then exit.
        var idIndex = 0;
        while (nodes.findIndex(node => node !== undefined ? node.id === newId : "") !== -1) {
            newId = 'node' + idIndex; //Generate a new Id
            idIndex++; //Increment by 1 in case it fails
        }

        //Assign the ViewComponent in a shadow dom so it can be resized and applied to the graph on resize
        activeNodeCompoents[newId] = getClone.cloneNode(true);
        activeNodeOptions[newId] = {
            uuId:uuId,
            elementOptions: elementOptions
        };

        //Ensure panel can grow on all sides and set it visible
        getClone.style.setProperty("width", "100%");
        getClone.style.setProperty("height", "100%");
        getClone.style.setProperty("display", "");

        //Add the new view component to the node array.
        nodes.push({
            id: newId, width: 100, height: 100, offsetX: 200, offsetY: 200,
            shape:
            {
                type: 'HTML',
                content: getClone
            },
            ComponentName: componentName,
            Events: [],
            Base64: "",
            isCustom: false,
            Loaded: false
        });

        //Draw the layoutDiagram
        DrawLayoutDiagramDiagram();
        $("#tpmTemplate").html(""); //Dispose the template so widgets don't draw inside of it.
        //Redraw can be disposed of ??
        RedRaw();
    }

    function DrawBindingOptions() {
        //Initialize ListView component
        var listviewInstance = new ej.lists.ListView({
            //set the data to datasource property
            dataSource: bindingOptions,
            // map the groupBy field with category column
            fields: { groupBy: 'category', tooltip: 'text' },
            select: function (args) {

            },

        });
        //Render initialized ListView
        listviewInstance.appendTo("#element");


    }

    function RemoveNode(element) {

        //Check if it still exists in the node array, this method is triggered twice from the syncfusion diagram, once the delete button is pressed
        // and once when the item is being removed from the screen.
        let index = nodes.findIndex(node => node !== undefined ? node.id === element : "");

        //In case index doesn't exist we return.
        if (index === -1)
            return;

        //Initialize two temporary collections to hold our new items
        var tpmNodes = [];
        var tpmactiveNodes = {};
        var i = 0;
        for (var node in nodes) {
            //In case item doesn't match our index we allow it to remain in the collection, othewrise we delete it.
            if (parseInt(node) !== index) {
                tpmNodes[i] = nodes[node];
                tpmactiveNodes[nodes[node].id] = activeNodeCompoents[nodes[node].id];
                i++;
            }
            else {
                if (nodes[node].Loaded) {
                    var dto = {
                        Layout: GetActiveFileName(),
                        File: nodes[node].id
                    }

                    $.ajax({
                        method: "POST",
                        url: "/Home/RemoveItemFromLayout",
                        contentType: "application/json",
                        data: JSON.stringify(dto)
                    }).done(function (args) {


                    });
                }
            }
        }

        //Assign the two varibles to the global objects used by the collection next time an object is being added.
        nodes = tpmNodes;
        activeNodeCompoents = tpmactiveNodes;
        DrawLayoutDiagramDiagram();
    }


    function UploadBackground() {
         var getElement;
        getElement = document.getElementById("placeholder_file");
        getElement.type = "file";
        getElement.click();
        getElement.onchange = ImageSelected;
    }


    function ImageSelected(event) {


        var dto = {
            Path: event.path[0].files[0].path,
            Name: event.path[0].files[0].name
        }

        $.ajax({
            method: "POST",
            url: "/Home/ConvertTobase",
            contentType: "application/json",
            data: JSON.stringify(dto)
        }).done(function (args) {
            debugger
            var activeId = activeNodeOptions[activeNode].uuId;
            var imageElement = document.getElementById("placeholder_" + activeId);
            imageElement.setAttribute("src", "data:image/jpeg;base64, " + args);
            imageElement.style.setProperty("display", "");

           // UpdatePlaceholderContent(activeNode, args);
            var tempalte = imageElement.parentElement.parentElement;
            let index = nodes.findIndex(node => node.id === activeNode);
            nodes[index].base64 = args;
            nodes[index].shape.content = tempalte;
            nodes[index].IsCustom = true;
          });

    }


    function UpdateNodeSize(id, width, height) {
        var element = id;

        //Check if the changed property has a valid ID
        if (element === undefined)
            return;

        

        //Find the index of the element and assign it to the node object
        let index = nodes.findIndex(node => node.id === element);
        nodes[index].width = width;
        nodes[index].height = height;
        if (nodes[index].IsCustom !== undefined && !nodes[index].IsCustom) {
            var item = activeNodeCompoents[element].cloneNode(true);
            item.style.setProperty("width", "100%");
            item.style.setProperty("height", "100%");
            RedRaw();

            item.style.setProperty("display", "");
            nodes[index].shape.content = item
        }
    }
   
</script>